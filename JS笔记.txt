JS和Jquery阶段
js数据类型
    undefined  boolean  string
    number  object  function
JS中的调试方式
    1.alert()弹窗
        会中断代码执行
    2.document.write()
        相当于PHP中的echo
        当代码执行完毕再执行，会覆盖原来的内容(最好不要出现在事件中)
        function demo()
         { //最好不要出现在事件中
        document.write(123);}
    3.console 
        console.log() //输出简单的数据
        console.dir（） //用于调试比较复杂的数据，比如对象
    4.document.title
        用于调试动态数据
    5.debugger 断电调试
        通常用于调试循坏
定时器
    一次性定时器
        setTimeout(回调函数,时间);
        时间单位：毫秒 1000毫秒=1秒
        clearTimeout(设置定时器的时候返回的值)
    周期性定时器
        setInterval(回调函数，时间);
        clearInterval(设置定时器的时候返回的值)
    清除定时器
    clearTimeout(timer);
    clearInterval(time2);
类型的转换
    Nunber()
     parseInt()/parseFloat()
找对象
    document.getElementById('ID号');
    document.getElementsByTagName('标签名');
    document.getElementsByClassName('class名');
window对象
    window.closed(); 
        关闭浏览器窗口。            
    window.open();
        打开一个新的浏览器窗口或查找一个已命名的窗口。 
    prompt(提示内容，输入框);//弹框
navigator浏览器对象
    检测字符串第一次出现的位置，区分大小写，没有找到返回-1
    window.navigator.userAgent;//获取浏览器详细信息
screen屏幕对象
    获取屏幕宽高
       window.screen.windth
       window.screen.height
    除去任务栏之外的屏幕宽度(可用宽度)
        window.screen.availWidth
        window.screen.availHeight
history历史对象
    window.history.length; //可后退数
    window.history.back();//后退一步
    window.history.forward();//前进一步
    window.history.go(1);//前进一步
    window.history.go(-1);//后退一步
location对象
    获取浏览器的url地址(可读可写)
    window.location.href;
    window.location.href = 'https://www.baidu.com';
    刷新当前页面
    window.location.reload();
    window.history.go();
    window.location.href = window.location.href;

研究date对象
  d.getFullYear()  
  d.getMonth()
  d.getTime()
文档事件
        当window加载完毕的时候执行
        onload 
        onunload
图片事件
    onload 图片加载完成
    onerror 图片加载失败时用
鼠标事件
    onclick 单击
    ondblclick 双击
    onmousedown 按下鼠标
    onmouseup 放开鼠标
    onmousemove 移动鼠标
    onmouseover onmouseout  //陆军(有层叠的时候有问题，会先退出包含子模块在重新进去触发事件)
        鼠标在某事件上面的时候
    onmouseenter onmouseleave//空军
        鼠标在某事件上面的时候
当鼠标弹起的时候，清除移动事件
    document.onmousemove = null;
    事件对象
        鼠标坐标点
            e.clientX
            e.clientY
        键盘编码
            e.keyCode
        组合键
            e.ctrlKey
            e.altKey
            e.shiftKey
    键盘事件
        onkeydown 按下键时
        onkeyup 放开键时
其他事件
    oncontextmenu   右键菜单弹出之前触发
    onresize    调整窗口大小的时候触发
    onscroll    滚到滚动条的时候触发
修改某标签的值
    tab.innerHTML = res; 
常用属性
    *offset
        元素本身的宽高(包括元素的宽高和内边距和边距，不包括外边距)
        offsetWidth
        offsetHeight
        获取元素在浏览器中的位置
        offsetTop
        offsetLeft
    client
        clientWidth
        clientHeight 
        clientTop
        clientLeft
        可以用于获取浏览器的可用宽度
            document.documentElement.clientWidth
            document.docuementElement.clientHeight
    scroll
        scrollWidth
        scrollHeight
        scrollTop
        scrollLeft
        用于获取整个文档的宽度
            document.body.scrollHeight
            document.body.scrollWidth
        获取滚动条的位置(可读可写)
            document.body.scrollLeft
表单事件
    onfocus：获取焦点时触发
    onblur：失去焦点时触发
    onchange: 
        1.很少绑定在input:text上,通常用于绑定到下拉框上(可做二级联动
        2.将change事件绑定到文件上传域(可以判断大小、类型。。。
    onselect：鼠标选择内容时触发
    onsubmit: 点击提交按钮时触发
    onreset:  点击重置按钮时触发
    oninput:  当input框输入内容时，获取里面的值
    window.URL.createObjectURL(file)
        获取图片的二进制流的地址
节点
    每个节点都包含3个属性：
        nodeName、nodeValue、nodeType
    nodeName 属性含有某个节点的名称。
        元素节点的nodeName是标签的名称
        属性节点的nodeName是属性名称
        文本节点的nodeName永远是#text
        文档节点的nodeName永远是#document
    nodeValue
        对于文本节点，nodeValue 属性包含文本。
        对于属性节点，nodeValue 属性包含属性值。
        nodeValue属性对于文档节点和元素节点是不可用的。(null)
    nodeType
        元素 1 属性 2 文本 3  注释 4    文档 9
    根节点
        document.documentElement  HTML
        document.body             body
    节点定位
        document.getElementById('ID号');
        document.getElementsByClassName('class类名');
        document.getElementsByTagName('标签');
        document.getElementsByName('name值')；
节点属性
    向下找儿子
        firstChild  //找大儿子
        lastChild   //找小儿子
        childNodes  //找所有的儿子,包括文本节点(不常用)
        children    //  找所有的元素的儿子(不包括文本节点)
    向上找爹
        parentNode //不会找到文本节点，放心使用
    找兄弟(会找到文本节点)
        nextSibling
        previousSibling
    找元素兄弟
        nextElementSibling
     	previousElementSibling
    找所有的属性集合
        attributes
创建和添加节点
    方法
        创建一个节点
            document.createElement('标签名');//只创建，不添加
        添加节点(只能添加子节点)
            die.appendChild(son);
            die.insertBefore(要添加的元素，插袋谁的前面)
        //把div插到body的最后面
            document.body.appendChild(div);
        //将div插到hehe的前面
            document.body.insertBefore(div,hehe);
        //对象不会凭空产生，操作DOM树中已经存在的节点，相当于剪切操作
            document.body.appendChild(hehe);
克隆和删除节点
    克隆节点
        var newObj = old.cloneNode([true]);//只有传了参数true，才会带着子节点一起克隆
    删除节点(只能删除子节点)
        die.removeChild(son)
        经典的自杀案例
        son.parentNode.removeChild(son);
        杀爹
        son.parentNode.parentNode.removeChild(son.parentNode);
        删html
        document.removeChild(document.documentElement);
设置属性和获取属性
    获取属性
        getAttribute('属性名');
        alert(box.className);
            //class是关键字
        alert(box.xxoo);
            //非HTML的标准属性，无法用直接获取
    设置属性
        setAttribute('属性名','属性值');
        box.title = '123';//可以在代码中看到
        box.abc = 'xxoo';//非标准属性看不得
    用方法来设置和获取
        alert(box.getAttribute('xxoo'));//获取全部属性
 
扩展
arguments:包含所有实参的集合

1. window对象
    常用的属性：
        document ：对 Document 对象的只读引用
        history ：对 History 对象的只读引用。
        location：用于窗口或框架的 Location 对象 
        Navigator： 对 Navigator 对象的只读引用 
        parent： 返回父窗口。 
        length: 设置或返回窗口中的框架数量。 
        Screen: 对 Screen 对象的只读引用 
        top: 返回最顶层的先辈窗口。 
    
    常用方法：
        alert() 显示带有一段消息和一个确认按钮的警告框。 
        confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框。
        prompt() 显示可提示用户输入的对话框。
        
        close() 关闭浏览器窗口。            
        open() 打开一个新的浏览器窗口或查找一个已命名的窗口。 
        scrollTo() 把内容滚动到指定的坐标。 
        
        setTimeout() 在指定的毫秒数后调用函数或计算表达式。 
        clearTimeout() 取消由 setTimeout() 方法设置的 timeout。 
        setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式。 
        clearInterval() 取消由 setInterval() 设置的 timeout。 

2. Navigator 对象
        Navigator 对象包含的属性描述了正在使用的浏览器。可以使用这些属性进行平台专用的配置。
    常用属性：
        with(document) {
             write ("你的浏览器信息：<ul>");
             write ("<li>代码："+navigator.appCodeName+"</li>");
             write ("<li>名称："+navigator.appName+"</li>");
             write ("<li>版本："+navigator.appVersion+"</li>");
             write ("<li>语言："+navigator.language+"</li>");
             write ("<li>编译平台："+navigator.platform+"</li>");
             write ("<li>用户表头："+navigator.userAgent+"</li>");
             write ("</ul>");
        }
        

3. Screen 对象包含有关客户端显示屏幕的信息。

    常用属性：
        document.write( "屏幕宽度："+screen.width+"px<br />" );
        document.write( "屏幕高度："+screen.height+"px<br />" );
        document.write( "屏幕可用宽度："+screen.availWidth+"px<br />" );
        document.write( "屏幕可用高度："+screen.availHeight+"px" );
    
    参考了解其他属性信息获取方式
        网页可见区域宽： document.body.clientWidth
        网页可见区域高： document.body.clientHeight
        网页可见区域宽： document.body.offsetWidth (包括边线的宽)
        网页可见区域高： document.body.offsetHeight (包括边线的高)
        网页正文全文宽： document.body.scrollWidth
        网页正文全文高： document.body.scrollHeight
        网页被卷去的高： document.body.scrollTop
        网页被卷去的左： document.body.scrollLeft
        网页正文部分上： window.screenTop
        网页正文部分左： window.screenLeft
        屏幕分辨率的高： window.screen.height
        屏幕分辨率的宽： window.screen.width
        屏幕可用工作区高度： window.screen.availHeight
        屏幕可用工作区宽度： window.screen.availWidth
        
4. History 对象包含用户（在浏览器窗口中）访问过的 URL。
    
    
5. Location 对象包含有关当前 URL 的信息。

* Array（数组）
    var a= new Array();         //创建一个空数组
    a = new Array(10);          //创建一个数组单元为10个的数组。
    a = new Array(10,20,30);    //创建一个指定数组单元的数组。
    a=['a','b','c','d'];        //快捷定义数组

    常用属性：
        length--获取数组长度。
    
    常用方法：
        concat()    返回两个或更多数组组合而成的新数组
        join()      把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。
        pop()       删除并返回数组的最后一个元素 
        push()      向数组的末尾添加一个或更多元素，并返回新的长度。 
        shift()     移除数组中的第一个元素并返回该元素。
        unshift()   在开始添加一个元素
        sort()      对数组的元素进行排序
        reverse()   反转一个数组
        toString()  把数组转换为字符串，并返回结果。
        。。。
        
* Boolean  布尔值包装类对象（不用写）
    方法：
        toSource()  返回该对象的源代码。 
        toString()  把逻辑值转换为字符串，并返回结果。
        valueOf()   返回 Boolean 对象的原始值。
* Date （Y-m-d H:i:s）
    var dd = new Date();
    
    getDate()       从 Date 对象返回一个月中的某一天 (1 ~ 31)。
    getDay()        从 Date 对象返回一周中的某一天 (0 ~ 6)。
    getMonth()      从 Date 对象返回月份 (0 ~ 11)。
    getFullYear()   从 Date 对象以四位数字返回年份。 
    getYear()       请使用 getFullYear() 方法代替。 
    getHours()      返回 Date 对象的小时 (0 ~ 23)。 
    getMinutes()    返回 Date 对象的分钟 (0 ~ 59)。
    getSeconds()    返回 Date 对象的秒数 (0 ~ 59)。 
    getMilliseconds()   返回 Date 对象的毫秒(0 ~ 999)。 
    getTime()       返回 1970 年 1 月 1 日至今的毫秒数。
    同上还有很多set方法用来设置。
    
* Math  对象用于执行数学任务。方法是静态的。
    abs(x)      返回数的绝对值。
    ceil(x)     对数进行上舍入。
    floor(x)    对数进行下舍入。
    random()    返回 0 ~ 1 之间的随机数。
    round(x)    把数四舍五入为最接近的整数。
    
    max(x,y)    返回 x 和 y 中的最高值。 
    min(x,y)    返回 x 和 y 中的最低值。
    
* Number（不用写）
    toString();
    
* String 子串处理对象
    indexOf()   检索字符串。 
    lastIndexOf()   从后向前搜索字符串。
    match()     找到一个或多个正在表达式的匹配。
    replace()   替换与正则表达式匹配的子串。
    slice()     提取字符串的片断，并在新的字符串中返回被提取的部分。
    split()     把字符串分割为字符串数组。
    substr()    从起始索引号提取字符串中指定数目的字符。
    substring()     提取字符串中两个指定的索引号之间的字符。
    toLowerCase()   把字符串转换为小写。
    toUpperCase()   把字符串转换为大写。

* RegExp
    exec()  正则匹配
    test()
    match()

在DOM中常用的集合
    document.forms //返回页面中所有的表单
    form.elements //返回所有的表单元素

    可以通过表单域中的name值直接选中某个表单：
        form.username
        form.pwd
    页面中所有的ID可以直接当做对象使用(不推荐)
        最初是IE搞出来的事情，不在标准里面，不推荐
    select.options //获取所有下拉框的集合
    select.length //可读可写
    insertRow();//添加一个新行到表格
    insertCell();//添加一个单元格
    deleteRow();删除一行表格
    rowIndex();获取当前行的位置

可以直接调用的事件
    obj.submit();//提交事件
    btn.click();//点击事件
    focus();//获取焦点